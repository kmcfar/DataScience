__author__ = 'kevinmcfarland'

'''
This code inspects the street names in the data and standardizes the names and abbreviations
'''


import xml.etree.cElementTree as ET
from collections import defaultdict
import re
import pprint

OSMFILE = "bellevue_washington.osm"
street_type_re = re.compile(r'\b\S+\.?$', re.IGNORECASE)


expected = ["Street", "Avenue", "Boulevard", "Drive", "Court", "Place", "Square", "Lane", "Road",
            "Trail", "Parkway", "Commons", "Center", "Circle", "Way", "Plaza", "Point"]

mapping = { "St": "Street",
            "St.": "Street",
            "ST": "Street",
            "Rd." : "Road",
            "Ave" : "Avenue",
            "CT" : "Court",
            "street" : "Street",
            "Av" : "Avenue",
            "PL" : "Place",
            "Ave." : "Avenue",
            "AVENUE" : "Avenue",
            "Blvd" : "Boulevard",
            "Blvd." : "Boulevard",
            "Sq" : "Square",
            "st" : "Street",
            "st." : "Street"
            }

def audit_street_type(street_types, street_name):
    m = street_type_re.search(street_name)
    if m:
        street_type = m.group()
        if street_type not in expected:
            street_types[street_type].add(street_name)


def is_street_name(elem):
    return (elem.attrib['k'] == "addr:street")


def audit(osmfile):
    osm_file = open(osmfile, "r")
    street_types = defaultdict(set)
    for event, elem in ET.iterparse(osm_file, events=("start",)):

        if elem.tag == "node" or elem.tag == "way":
            for tag in elem.iter("tag"):
                if is_street_name(tag):
                    audit_street_type(street_types, tag.attrib['v'])
    street_type_count = {key: len(value) for key, value in street_types.items()}
    return street_types
    #return street_type_count


def update_name(name, mapping):
    auditkeys = mapping.keys()
    street_name = street_type_re.search(name).group()
    if (street_name not in expected and street_name in auditkeys):
         name = re.sub(street_name, mapping[street_name],name)
    return name




def run():
    st_types = audit(OSMFILE)
    pprint.pprint(dict(st_types))
    for st_type, ways in st_types.iteritems():
        for name in ways:
            better_name = update_name(name, mapping)
            if name != better_name:
                print name, "=>", better_name

run()
